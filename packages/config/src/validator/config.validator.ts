/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from 'util';
import Ajv = require('ajv');
import { Config } from '@acot/types';
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: 'array',
  format: 'fast',
  nullable: false,
  unicode: true,
  uniqueItems: true,
  useDefaults: false,
});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export { Config };
export const ConfigSchema = {
  $schema: 'http://json-schema.org/draft-07/schema#',
  allOf: [
    {
      properties: {
        extends: {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        headers: {
          $ref: '#/definitions/Record',
        },
        presets: {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        rules: {
          $ref: '#/definitions/RuleConfig',
        },
      },
      type: 'object',
    },
    {
      properties: {
        chromeChannel: {
          $ref: '#/definitions/ChromeChannel',
        },
        connection: {
          $ref: '#/definitions/ConnectionOptions',
        },
        launchOptions: {
          $ref: '#/definitions/LaunchOptions',
        },
        origin: {
          type: 'string',
        },
        overrides: {
          items: {
            allOf: [
              {
                properties: {
                  extends: {
                    items: {
                      type: 'string',
                    },
                    type: 'array',
                  },
                  headers: {
                    $ref: '#/definitions/Record',
                  },
                  presets: {
                    items: {
                      type: 'string',
                    },
                    type: 'array',
                  },
                  rules: {
                    $ref: '#/definitions/RuleConfig',
                  },
                },
                type: 'object',
              },
              {
                properties: {
                  exclude: {
                    items: {
                      type: 'string',
                    },
                    type: 'array',
                  },
                  include: {
                    items: {
                      type: 'string',
                    },
                    type: 'array',
                  },
                },
                type: 'object',
              },
            ],
          },
          type: 'array',
        },
        paths: {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        reporters: {
          items: {
            anyOf: [
              {
                $ref: '#/definitions/Simplify<Merge_<{with?:Record<string,any>;},{uses:string;}>>',
              },
              {
                type: 'string',
              },
            ],
          },
          type: 'array',
        },
        runner: {
          anyOf: [
            {
              $ref: '#/definitions/Simplify<Merge_<{with?:Record<string,any>;},{uses:string;}>>',
            },
            {
              type: 'string',
            },
          ],
        },
        viewport: {
          anyOf: [
            {
              $ref: '#/definitions/Viewport',
            },
            {
              type: 'string',
            },
          ],
        },
        workingDir: {
          type: 'string',
        },
      },
      type: 'object',
    },
  ],
  definitions: {
    ChromeChannel: {
      enum: ['*', 'canary', 'puppeteer', 'stable'],
      type: 'string',
    },
    ChromeReleaseChannel: {
      enum: ['chrome', 'chrome-beta', 'chrome-canary', 'chrome-dev'],
      type: 'string',
    },
    ConnectionOptions: {
      $ref: '#/definitions/__type_2',
    },
    LaunchOptions: {
      $ref: '#/definitions/__type_3',
    },
    Record: {
      $ref: '#/definitions/__type',
    },
    Record_1: {
      $ref: '#/definitions/__type_4',
    },
    RuleConfig: {
      $ref: '#/definitions/__type_1',
    },
    'Simplify<Merge_<{with?:Record<string,any>;},{uses:string;}>>': {
      properties: {
        uses: {
          $ref: '#/definitions/U',
        },
        with: {
          $ref: '#/definitions/T',
        },
      },
      required: ['uses'],
      type: 'object',
    },
    T: {},
    TargetFilterCallback: {
      $ref: '#/definitions/__type_5',
    },
    U: {
      type: 'string',
    },
    Viewport: {
      description: 'Sets the viewport of the page.',
      properties: {
        deviceScaleFactor: {
          description:
            'Specify device scale factor.\nSee {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio | devicePixelRatio} for more info.',
          type: 'number',
        },
        hasTouch: {
          description: 'Specify if the viewport supports touch events.',
          type: 'boolean',
        },
        height: {
          description: 'The page height in pixels.',
          type: 'number',
        },
        isLandscape: {
          description: 'Specifies if the viewport is in landscape mode.',
          type: 'boolean',
        },
        isMobile: {
          description: 'Whether the `meta viewport` tag is taken into account.',
          type: 'boolean',
        },
        width: {
          description: 'The page width in pixels.',
          type: 'number',
        },
      },
      required: ['height', 'width'],
      type: 'object',
    },
    __type: {
      type: 'object',
    },
    __type_1: {
      type: 'object',
    },
    __type_2: {
      properties: {
        command: {
          type: 'string',
        },
        timeout: {
          type: 'number',
        },
      },
      type: 'object',
    },
    __type_3: {
      properties: {
        args: {
          description:
            'Additional command line arguments to pass to the browser instance.',
          items: {
            type: 'string',
          },
          type: 'array',
        },
        channel: {
          $ref: '#/definitions/ChromeReleaseChannel',
          description: 'Chrome Release Channel',
        },
        debuggingPort: {
          type: 'number',
        },
        defaultViewport: {
          $ref: '#/definitions/Viewport',
          description: 'Sets the viewport for each page.',
        },
        devtools: {
          description:
            'Whether to auto-open a DevTools panel for each tab. If this is set to\n`true`, then `headless` will be forced to `false`.',
          type: 'boolean',
        },
        dumpio: {
          description:
            'If true, pipes the browser process stdout and stderr to `process.stdout`\nand `process.stderr`.',
          type: 'boolean',
        },
        env: {
          $ref: '#/definitions/Record',
          description:
            'Specify environment variables that will be visible to the browser.',
        },
        executablePath: {
          description:
            'Path to a browser executable to use instead of the bundled Chromium. Note\nthat Puppeteer is only guaranteed to work with the bundled Chromium, so use\nthis setting at your own risk.',
          type: 'string',
        },
        extraPrefsFirefox: {
          $ref: '#/definitions/Record_1',
          description:
            '{@link https://searchfox.org/mozilla-release/source/modules/libpref/init/all.js | Additional preferences } that can be passed when launching with Firefox.',
        },
        handleSIGHUP: {
          description: 'Close the browser process on `SIGHUP`.',
          type: 'boolean',
        },
        handleSIGINT: {
          description: 'Close the browser process on `Ctrl+C`.',
          type: 'boolean',
        },
        handleSIGTERM: {
          description: 'Close the browser process on `SIGTERM`.',
          type: 'boolean',
        },
        headless: {
          description: 'Whether to run the browser in headless mode.',
          type: 'boolean',
        },
        ignoreDefaultArgs: {
          anyOf: [
            {
              items: {
                type: 'string',
              },
              type: 'array',
            },
            {
              type: 'boolean',
            },
          ],
          description:
            'If `true`, do not use `puppeteer.defaultArgs()` when creating a browser. If\nan array is provided, these args will be filtered out. Use this with care -\nyou probably want the default arguments Puppeteer uses.',
        },
        ignoreHTTPSErrors: {
          description: 'Whether to ignore HTTPS errors during navigation.',
          type: 'boolean',
        },
        pipe: {
          description:
            'Connect to a browser over a pipe instead of a WebSocket.',
          type: 'boolean',
        },
        slowMo: {
          description:
            'Slows down Puppeteer operations by the specified amount of milliseconds to\naid debugging.',
          type: 'number',
        },
        targetFilter: {
          $ref: '#/definitions/TargetFilterCallback',
          description:
            'Callback to decide if Puppeteer should connect to a given target or not.',
        },
        timeout: {
          description:
            'Maximum time in milliseconds to wait for the browser to start.\nPass `0` to disable the timeout.',
          type: 'number',
        },
        userDataDir: {
          description:
            'Path to a user data directory.\n{@link https://chromium.googlesource.com/chromium/src/+/refs/heads/main/docs/user_data_dir.md | see the Chromium docs}\nfor more info.',
          type: 'string',
        },
        waitForInitialPage: {
          description:
            'Whether to wait for the initial page to be ready.\nUseful when a user explicitly disables that (e.g. `--no-startup-window` for Chrome).',
          type: 'boolean',
        },
      },
      type: 'object',
    },
    __type_4: {
      type: 'object',
    },
    __type_5: {
      type: 'object',
    },
  },
};
export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, 'errors'>;
export const isConfig = ajv.compile(ConfigSchema) as ValidateFunction<Config>;
export default function validate(value: unknown): Config {
  if (isConfig(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(
        isConfig.errors!.filter((e: any) => e.keyword !== 'if'),
        { dataVar: 'Config' },
      ) +
        '\n\n' +
        inspect(value),
    );
  }
}
